#summary Descriptions of fixes
= Список правок =
<wiki:toc max_depth="3" />

== функции для работы с логом ==

*[ТЧ/ЧН/ЗП]* Глобальная функцию *log1* для вывода текста в лог. Для ТЧ заменяет уродливую систему *get_console():execute()* и прочее в этом роде. Для ЧН позволяет обходится без *error_log*. Функция просто выводит текст без затей и лишних надписей белым цветом.

*[ЧН/ЗП]* Глобальная функция *flush1()*. Записывает текущее содержимое лога на диск. Без неё вполне можно обойтись, используя *get_console():execute("flush")*. Использовать надо с осторожностью, поскольку лог при вызове этой функции не просто дозаписывается, но пишется полностью заново. Таким образом, чем больше там накопилось записей, тем медленнее это будет работать. Это может быть особенно критично для отладочных версий модов, где в лог скидивается масса информации. Собственно, поэтому эта функция и была убита в оригинале.

Примечания: 
 * Можно выводить надписи цветом. Для этого надо в начале выводимой строки поместить два специальных символа.
||## (две решётки)||синевато-зеленый (#0E8C82)||<font color="#0E8C82">ОБРАЗЕЦ</font>||
||`~~` (две тильды)||жёлтый  (#FFFF00)||<font color="#FFFF00">ОБРАЗЕЦ</font>||
||`**` (два умножения)||серый  (#808080)||<font color="#808080">ОБРАЗЕЦ</font>||
||!! (два восклицательных знака)||красный (#FF0000)||<font color="#FF0000">ОБРАЗЕЦ</font>||
||-- (два минуса)||зелёный (#00FF00)||<font color="#00FF00">ОБРАЗЕЦ</font>||

 * Для ЧН и ЗП в общем-то нет необходимости заморачиваться с выводом в лог игры, поскольку там экспортировано пространство имён io из стандартной библиотеки Lua. Таким образом можно организовать сколько угодно логов в произвольные файлы.

== Колбек на хит актора ==

*[ТЧ/ЧН/ЗП]* Для актора работает колбек на хит. Устанавливать также, как для монстров и сталкеров. Вызывается независимо от того, помер ГГ или нет.

== Колбек на хит объекта прожектора ==

*[ТЧ]* Добавлен колбек на хит объекту прожектора (searchlight). Нужен для реализации разбивания прожектора выстрелом аналогично как это происходит в движке для лампочек.

== Колбеки на клавиши и мышь ==

*[ТЧ/ЧН]* Добавлены колбеки актора на нажатие/удержание/отпускание клавиш а также на вращение мышиного колеса и движение мыши. Коды колбеков:
 * нажатие - 123
 * отпускание - 124
 * удержание - 125
 * кручение колёсика мыши - 126
 * движение мыши - 127

Установка производится также, как и всех других колбеков в биндере: <code lang="lua">self.object:set_callback(123, self.on_key, self)
...
function actor_binder:on_key(key)
 log1("actor_binder:on_key "..key.." "..dik_to_bind(key) )
end</code> Снятие: <code lang="lua">self.object:set_callback(123, nil)</code> Аргументы колбеков:

 * для клавиш - коды клавиш, для которых в скриптовом классе *DIK_keys* есть удобные обозначения. Среди прочего, там есть и коды для мышиных кнопок, т.е. таким образом будут ловиться также мышиные нажатия.
 * для колеса мыши аргумент - скорость вращения + 100000. Т.е. из аргумента надо вычесть 100000, чтобы получить нужное значение. У меня после вычитания всегда выходило +/-120
 * для движения мыши два аргумента - смещения мыши с последнего перемещения, также каждое + 100000. Это не координаты мыши, а выходит больше скорость перемещения.

Для предотвращения вылета при выходе из игры по *Alt+F4* вызов данных колбеков на *Alt* заблокирован совсем. *F4* разрешён только на нажатие.

*[ЗП]* - из списка приведенного выше добавлен лишь один колбек на нажатие (123). 

== функция разрешения колбеков ==

*[ТЧ/ЧН]* Добавлена функция разрешения колбеков *set_extensions_flags(flags)*.

*flags *- целое значение, набор флажков, каждый из которых отвечает за свой колбек:

 * 1 - нажатие
 * 2 - отпускание
 * 4 - удержание
 * 8 - колёсико
 * 16 - движение мыши

Комбинировать флажки можно с помощью функций побитовой арифметики, а можно и просто складывая (естественно, соблюдая известную аккуратность). Таким образом, чтобы разрешить, скажем, отпускание кнопок и движение мыши надо сделать так: *set_extensions_flags(2 + 16).*

Узнать текущее значение набора флагов можно с помощью функции *get_extensions_flags*. Используем так:

*local flags = get_extensions_flags()*

Использование этих функций строго обязательно! В net_spawn биндера актора надо разрешить нужные колбеки (иначе они не будут работать), а в net_destroy - заблокировать ВСЕ колбеки обратно, иначе будет вылет при повторной загрузке.

*[ЗП]* - Функции включение/отключения (set_extensions_flags(flags)) в ЗП нет, но никаких проблем в работе колбека не заметил.

== bind_to_dik (перевод кода команды в код клавиши) ==

*[ТЧ/ЧН]* Глобальная функция *bind_to_dik*, которая переводит код команды в код клавиши. Предназначена для использования совместно с колбеками на нажатие. Если команда равна 79 (для ЧН) или 78 (для ТЧ) (т.е. соответствует неприбинденной клавише), то возвращает 100000. Значения аргумента больше этого значения вызывают вылет.

== функции работы с топливом для машины ==

*[ТЧ/ЧН]* К классу *game_object* добавлены следующие методы:

*get_fuel()* -- получить количество топлива<br>
*set_fuel(new_value)* -- установить количество топлива<br>
*get_fuel_tank()* -- получить размер бака<br>
*get_fuel_consumption()* -- получить расход топлива<br>
*set_fuel_consumption()* -- установить расход топлива<br>

Аргументы и результат - числа с плавающей запятой. Применимы только к машине и дают/устанавливают топливо, потребление и размер бачка. Пользуемся так: <code lang="lua">-- car_obj - клиентский объект машины
local fuel = car_obj:get_fuel()
car_obj:set_fuel(20.0)</code>

Используя эти функции можно сохранять состояние машины в биндере.

== получение информации о точке/объекте, куда смотрит актор ==

*[ТЧ/ЧН/ЗП]* Добавлена функция получения расстояния до точки, на которую смотрим (игровой дальномер, который отображается под прицелом):

*level.get_target_dist() <br/>*

*[ЧН]* Добавлен метод определения объекта, на который смотрит камера. Метод добавлен к классу *game_object*, так что можно вызывать для любого клиентского объекта, хотя наверное самым разумным будет использовать актора. Пользуемся так:

*local obj = db.actor:get_target_obj() <br/>*

возвращает клиентский объект. Если ни на что не смотрим, то возвращает nil. Объекты без визуала так увидеть невозможно.

*[ТЧ/ЗП]* это-же реализовано в виде функции *level.get_target_obj()*

== затычка от вылета mp_ranks ==

*[ТЧ/ЧН/ЗП]* Сделана затычка для предотвращения вылета при отсутствии ствола в mp_ranks. Не проверено, надо тестировать!

== получение/установка FOV камеры актора ==

*[ТЧ]* Реализовано методом класса *game_object*. Значение FOV хранится в глобальной переменной, поэтому годится любой клиентский объект. С другой стороны, всё-таки нужен клиентский объект, поэтому функция недоступна в тот момент, когда ни одного объекта нет, в частности при старте игры до загрузки сохранения. Это был самый быстрый вариант реализации. Если нужен вариант не привязанный к наличию объекта, скажите, я сделаю. Но это потребует дополнительной работы и будет не сразу. Используем так:

*fov = db.actor:get_camera_fov()* -- чтение

*db.actor:set_camera_fov(fov)* -- установка.

*[ЧН]*Для той-же цели добавлены глобальные функции *level.get_fov* и *level.set_fov*. Не проверено, надо тестировать! Пользоваться так:

*local fov = level.get_fov()* -- получение<br>
*level.set_fov(new_fov)* -- установка

*[ЗП]* добавлена консольная команда fov

== увеличение максимального количества артефактов на поясе ==

*[ЧН]* Максимальное количество артов на поясе увеличено до 10-и. Не проверено, надо тестировать! Это фактически правка не инвентаря, а брони. Надо протестировать также в режиме апгрейда, поскольку в каждом апгрейде свои лимиты.

== манипуляции предметами в инвентаре ==

*[ТЧ/ЧН]* Добавлены функции работы с поясом

 * *belt_count* (*belt_count* для ТЧ) -- возвращает количество объектов на поясе
 * *item_on_belt(index)* -- возвращает объект на поясе или nil, если индекс выходит за пределы [0, N-1] индекс считает от нуля.

В целом пользуемся примерно также, как существующими движковыми методами *object_count* и *object*: <code lang="lua">for i=0,db.actor:belt_count()-1 do
 log1(""..i.."="..db.actor:item_on_belt(i):section())
end</code>

*[ТЧ]* Добавлены аналогичные функции для рюкзака: *item_in_ruck* и *ruck_count*

*[ТЧ]* Добавлены колбеки на перемещение предметов в инвентаре:

 * на пояс - код 130
 * в рюкзак - код 131
 * в слот - код 132

Колбеки задаются для актора. Единственный аргумент - клиентский объект, который был перемещён. В целом работает примерно как колбек на поднятие.

Внимание! Колбеки срабатывают также при загрузке игры или уровня при выходе предметов инвентаря в онлайн.

*[ТЧ]* Добавлены функции, позволяющие перемещать предметы между рюкзаком, слотами и поясом:
 * *move_to_ruck* -- переместить в рюкзак
 * *move_to_belt* -- переместить на пояс
 * *move_to_slot* -- переместить в слот (какой именно, определяется секцией предмета)
 * *move_to_slot_and_activate* -- переместить в слот с одновременной активацией

Функции вызываются для клиентского актора: *actor:move_to_belt(item)*

*[ТЧ]* Добавлены функции определения местоположения предмета в инвентаре:
 * *is_on_belt* -- предмет находится на поясе
 * *is_in_ruck* -- предмет в рюкзаке
 * *is_in_slot* -- предмет в слоте
Функции вызываются для клиентского актора: *actor:is_in_slot(item)*

*[ТЧ]* Добавлены функции, проверяющие возможность перемещать предметы в рюкзак/слот/поясом:
 * *can_move_to_slot* -- можно переместить в слот
 * *can_move_to_ruck* -- можно переместить в рюкзак (вообще-то можно всегда, добавлено просто для полноты)
 * *can_move_to_belt* -- можно переместить на пояс
Функции вызываются для клиентского актора: *actor:can_move_to_belt(item)*

== универсальный хак для актора ==

*[ТЧ]* В класс *game_object* добавлены универсальные функции для чтения/записи значения с плавающей запятой по заданному смещению в объекте актора и аналогичную для целого значения пока только на чтение:

 * *local res = db.actor:get_actor_float(pos)* -- получение 4-х байтового числа с плавающей запятой по заданному смещению из объекта актора.
 * *local res = db.actor:get_actor_int(nil, pos)* -- получение 4-х байтового целого по заданному смещению из объекта актора. Первый аргумент - заглушка, должен быть всегда nil.
 * *db.actor:set_actor_float(nil, v, pos)* -- запись 4-х байтового числа с плавающей запятой по заданному смещению в объект актора. Первый аргумент - заглушка, всегда nil.

Все эти функции применяются для *game_object*, но годятся строго для объекта актора! Не пытайтесь использовать их для других объектов.

=== известные смещения ===
 * *db.actor:get_actor_float(900)* -- уровень шума. В сущности, это то, что слышит сам актор, поскольку это число обновляется во внутреннем колбеке на звук актора с проверкой, что это он же сам и шумит. При этом, если звуков нет, то число начинает непрерывно уменьшаться со скоростью 0.3/сек. Таким образом, негативное значение измеряет время тишины, а позитивное - это уровень шумности самого актора. И это именно то число, которое отображается на индикаторе.

== расширения для работы с оружием ==

*[ТЧ]* Добавлены методы game_object для работы с объектами оружия:

 * *local res = wpn:get_wpn_int(nil, pos)* -- получение целого 4-х байтового числа по заданному смещению для любого типа оружия, т.е. для объектов, производных от *CWeapon*.
 * *wpn:set_wpn_int(pos, value)* -- аналогично установка целого 4-х байтового числа по заданному смещению
 * *value = wpn:get_wpn_float(pos)* -- чтение 4-х байтового&nbsp;числа с плавающей запятой (float) по смещению pos
 * *wpn:set_wpn_float(nil, value, pos)* -- запись float по смещению pos

Пояснение: Этими функциями можно пользоваться для всех типов стволов также и для получения/уставноки полей сверх базовых из *CWeapon*. Это возможно потому, что базовый объект *CWeapon* расположен в любом производном по нулевому смещению (что в иных случаях может быть и нет так). Однако, надо понимать, что при этом можно для неправильного типа объекта вылезти за его границы. В общем, надо сначала убедиться, что тип объекта правильный. В частности для этого предназначены функции *is_weapon* и *is_weapon_gl*.

== телепорт объектов ==

*[ТЧ]* В класс *alife_simulator* добавлен метод *teleport_object *, предназначенный для телепорта объектов. Работает между уровней и для произвольного типа объектов (живых, физических). Пользоваться так:<br/>
*alife():teleport_object("", new_pos, new_lvid, new_gvid, object_id)*

первый аргумент - заглушка. Должен быть строкой с произвольным значением.

== правки для исправления бага с визуалом актора ==

*[ТЧ]* Внесены изменения на предмет правки бага с визуалом актора:

 # Работа внутреннего колбека на попадание брони в рюкзак деактивирована. Ранее там была установка дефолтового визуала актора и выключение ПНВ. Это некорректно, поскольку броня может попадать в рюкзак не только после удаления из слота, но и другими путями.
 # Для компенсации вырезанного поведения в класс game_object добавлен метод set_actor_visual. Работает только для актора. Использование простое: *cact:set_actor_visual("actors\\monolit\\stalker_mo_mask")*

Идея заключается в том, что в колбеках на попадание предмета в рюкзак и выбрасывание из инвентаря надо проверить, не изменился ли костюм в слоте с последнего раза. Если изменился, то надо установить визуал этой функцией в соответствии с костюмом. Если не изменился, то ничего делать не надо.

Примечания:
 * Возможно, должны быть ещё точки проверки, кроме колбеков на дроп и попадание в рюкзак. По идее это все способы, какими может исчезнуть костюм из слота: снять в рюкзак либо выкинуть прямо из слота, но вдруг я чего-то не додумал.
 * Пока не ясно, как это будет работать и насколько устойчиво. Опять же, вытащена штатная функция движка, которой меняется и должен меняться визуал, но кто его знает.
 * Надевание скриптово обрабатывать не надо. Вроде как движок с этим сам неплохо справляется.
 * Не вполне очевидно, что делать в ситуации, когда один костюм заменяется другим. В этот момент отрабатывает движковая смена визуала, а с другой стороны происходит снятие старого костюма и вызов колбека на снятие. Что происходит раньше, что позже - разбирайтесь и разруливайте сами.
 * Работа встроенного ПНВ таким образом подпорчена. Теперь он не отключается при снятии костюма вовсе (вручную по идее должен отключаться, как и раньше).

== Консольные команды для настройки худа оружия ==

Режим настройки худа оружия, известный по билдам, вырезан в релизе не полностью. По крайней мере в ТЧ остался код обработки нажатий и глобальная переменная с режимом настройки. Убрали только консольные команды для установки режима, так что он всегда "0" т.е. не активен.

*[ТЧ]* Возвращены две команды консоли - *hud_adjust_mode* и *hud_adjust_value*:

*hud_adjust_mode* <номер режима 0 - 5>

режимы:
 * 0 - не делать ничего
 * 1 - подгонка худа в режиме прицеливания
 * 2, 5 - подгонка позиции партиклов стрельбы для разных режимов. Не работает!
 * 3 - подгонка позиции гранаты. По идее должна работать, но я не знаю как именно.
 * 4 - подгонка позиции партиклов гильз. Не работает!

Как пользоваться. Команда в движке завязана на жёстко заданные клавиши. в случае с настройкой позиции оружия: *ASDW* - перемещение, *QE* - ближе/дальше, *JKLI* - вращение, *P* - скинуть полученные координаты в лог. Удерживаете мышой режим прицеливания и настраиваете ствол клавишами. Потом жмёте "P" и в логе смотрите получившиеся настройки ствола. Для других режимов используются те же клавиши. На время настройки имеет смысл отбиндить штатное назначение, поскольку конфликтует.

*hud_adjust_value* <чувствительность настройки в диапазоне 0.0 - 1.0>. Это приращение соответствующего значения за одно нажатие клавиши. По моим ощущениям осмысленными являются достаточно маленькие значения типа 0.01.

Есть один побочный эффект, который надо компенсировать скриптом. Режим запоминается в настройках, так что надо его принудительно скриптом выставлять при старте игры в ноль, иначе у игроков начнутся непонятки.

== Проверка на нулевой аргумент в *alife():release()* ==

В релизе движка имеется функция удаления объектов:
*alife():release(<серверный объект>, <неиспользуемый логический аргумент>)*
функция работает таким образом, что при передаче первым аргументом значения *nil* такая ситуация не обрабатывается, что приводит к генерации внутреннего исключения, которое по непонятным причинам не вызывает обрушения, а вместо этого приводит к зависанию внутренних подсистем игры с непонятными последствиями.

*[ТЧ]* В метод *release* класса *alife_simulator* добавлена проверка, что передаваемый объект для удаления не равен *nil*. Теперь реакция будет однозначная - вылет с логом, в котором будет внятное сообщение.

== Глобальная функция для выхода из игры с сообщением в логе ==

*[ТЧ]* Добавлена глобальная функция *fail(string <сообщение>)*, которая останавливает игру и выводит <сообщение> в лог. Для останова игры использована внутренняя функция, которая используется для тех-же целей самой игрой в различных проверках.

== Получение веса барахла ==

*[ТЧ]* Добавлен метод *get_weight* класса *game_object*, который работает только для актора и позволяет получить суммарную массу вещей в инвентаре. Это то число, которое отображается в окне инвентаря. Польза функции в том числе в том, что она автоматически учитывает массу патронов в пачках и в магазинах стволов.

== Дополнительные средства работы с инвентарными ящиками ==

*[ТЧ]* Добавлены методы для перебора предметов в ящиках:

*inv_box_count* -- получение количества предметов в ящике<br>
*object_from_inv_box* -- получение предмета по индексу (нумерация от нуля)

*[ТЧ]* *open_inventory_box(box)* -- метод актора. Открыть диалог с инвентарём ящика. Расстояние до ящика роли не играет, но ящик должен быть в онлайне.

*[ТЧ]* Добавлен колбек на взятие в инвентарный ящик. Колбек устанавливается для ящика, код 151.

== Функция лечения ран ==

*[ТЧ]* Добавлена функция уменьшения скорости кровотечения:

*npc:heal_wounds(<на сколько уменьшить>)*

Механизм кровотечения в движке сталкера не так прост, как может показаться. Внутри имеется полная информация о каждой ране (т.е. степень повреждения для каждой кости). Соответственно, степень кровотечения, которую мы получаем функцией *bleeding*, представляет собой некое вычисленное значение, которое суммируется из всех ран по всем костям. Внутри имеется также и функция для изменения кровотечения, но хитрая. С её помощью можно только уменьшить кровотечение, хотя она внутри и называется *change_bleeding*. Она уменьшает раны (все разом) а также совсем их убирает, когда они уменьшаются до нуля. Посему, экспортировав эту функцию, я решил и назвать её соответственно (*heal_wounds*/лечить, а не *change_bleeding*), дабы не было непоняток с её истинным назначением.

== Получение владельца holder-а ==

*[ТЧ]* Добавлена функция для получения владельца машины или станкового оружия:

*holder:get_holder_owner()* - возвращает *game_object* или *nil*, если владелец отсутствует. Работает для классов, унаследованных от *CCustomHolder*, каковыми являются машины и станковое оружие.

== Получение двухбайтового целого по смещению в объекте актора ==

*[ТЧ]* Добавлен метод для получения двухбайтового числа по заданному смещению в объекте актора

*local value = db.actor:get_actor_int16(nil, <смещение>)* - возвращает число в диапазоне 0-65535

Функция допускает широкое использование, хотя двухбайтовые значения и редко встречаются в объектах. В основном, функция была добавлена для получения id холдера (т.е. текущей машины, в которой сидит ГГ, или станкового пулемёта). Это делается так:

*local car_id = db.actor:get_actor_int16(nil, 1240)*

если ГГ не в машине, то вернёт 65535

== Манипуляция моделью худа ==

 * Установка видимости костей худа

*[ТЧ]* Добавлена функция для скрытия/показа определённых костей визуала худа:
*hud_item:set_hud_bone_visible(<имя кости>)*

  Предмет должен быть активным предметом, т.е. не только быть в активном слоте, но и чтобы худ был виден.

 * Получение позиции кости худа по аналогии с функцией для обычной модели

*local pos = hud_item:get_hud_bone_pos(bone_name)*

== Фикс функции disable_info_portion ==
*[ТЧ]* В начале функции вставлена проверка, чтобы при отсутствии нужной инфопорции функция не делала вообще ничего. Смысл фикса в удалении ненужных действий, в частности обновления диалоговых окон. Без этого фикса постоянно сбрасывается позиция скроллинга списка ответов в диалоге разговора, из-за чего становится проблематично добавить больше вариантов ответов, чем влезает в видимую область окна.

== Функция назначения *story id* ==

*[ТЧ]* Добавлена функция для одновременного назначения story id и его регистрации в реестре сюжетных идентификаторов. Подробнее:
 * имя функции *assign_story_id*, добавлена в виде метода класса *alife_simulator*
 * использовать так
*alife():assign_story_id(nil, nil, object_id, sid)*

где *object_id* - идентификатор объекта

*sid* - назначаемый story id. Естественно, надо прописать этот sid заранее в конфигах и дать ему символьный идентификатор, так что здесь можно использовать его идентификатор из таблицы *story_ids*. Что-то типа *story_ids.my_new_cool_sid*

*функция предназначена исключительно для использования сразу после спавна таким образом:
<code lang="lua">
local sim = alife()
local sobj = sim:create("stalker", pos, lvid, gvid)
sim:assign_story_id(nil, nil, sobj.id, story_ids.my_new_cool_sid)</code>
Ни в какой другой момент её вызывать не надо. Далее *sid* запомнится и будет вести себя как обычно. По идее, сразу должна заработать и логика, которая завязана на *sid*.

== Функции изменения отношения между NPC в оффлайне ==
*[ТЧ]* Добавлены функции для изменения отношений между неписями через ID. Соответственно, их можно использовать и для серверных объектов, в том числе сразу после создания, не дожидаясь выхода в онлайн.
 * установка отношения (метод актора) *actor:set_goodwill_ex(who_id, to_whom_id, goodwill)*
 * изменение отношения на заданное значение (метод актора) *actor:change_goodwill_ex(who_id, to_whom_id, goodwill_change)*
 * получение текущего отношения (глобальная функция) *GetGoodwill(who_id, to_whom_id)*

Примечания:

Поскольку функции реализованы достаточно уродливо, то предпочтительнее использовать скриптовые обёртки, добавляющие вменяемые функции в пространство имён *relation_registry* по аналогии с уже там имеющимися:
<code lang="lua">function relation_registry.get_goodwill(who_id, to_whom_id)
    return GetGoodwill(who_id, to_whom_id)
end

function relation_registry.set_goodwill(who_id, to_whom_id, goodwill)
    return db.actor:set_goodwill_ex(who_id, to_whom_id, goodwill)
end

function relation_registry.change_goodwill(who_id, to_whom_id, goodwill_change)
    return db.actor:change_goodwill_ex(who_id, to_whom_id, goodwill_change)
end</code>

Соответственно их использование:

*relation_registry.get_goodwill(who_id, to_whom_id)*<br>
*relation_registry.set_goodwill(who_id, to_whom_id, goodwill)*<br>
*relation_registry.change_goodwill(who_id, to_whom_id, goodwill_change)*

Есть одно ограничение, связанное с реализацией. Использовать эти функции можно только после появления онлайнового актора. Думаю впрочем, это не критично, просто надо об этом помнить.

== Свойство *satiety* для изменения/получения сытости ==

*[ТЧ]* в классе *game_object* добавлено свойство *satiety* для изменения/получения сытости. Использование:
 * получаем текущее значение *db.actor.satiety*
 * меняем как обычно для свойств (значение на запись означает приращение) *db.actor.satiety = 0.3* -- увеличить на 0.3

Применимо только к актору. Для остальных объектов вылета не вызовет, но и ничего не сделает: получение вернёт всегда 0, установка будет проигнорирована. Значение сытости имеет предел сверху 1.0, т.е. больше единицы не записать. Предела снизу нет.

Примечания относительно работы алгоритма голода/сытости:

 * значение сытости постоянно уменьшается со скоростью, заданной параметром "satiety_v" из секции "actor_condition". Скорость задаётся относительно секунд игрового времени.
 * на сытость никак не влияют арты, костюм и вообще что угодно, кроме этого постоянного уменьшения и съеденной еды.
 * по достижению нулевого и ниже значения начинает уменьшаться здоровье со скоростью заданной параметром "satiety_health_v" из той же секции "actor_condition". При положительной сытости здоровье напротив увеличивается с той же  скоростью. Обращаю внимание, что скорость увеличения или уменьшения здоровья ни от чего не зависит, только меняет знак соответственно знаку сытости .
 * Как увеличение так и уменьшение здоровья происходит только при отсутствии кровотечения.
 * зелёный индикатор голода появляется при значении сытости < 0.5

== Фикс некорректного переключения гранат ==
*[ТЧ]* Движок некорректно переключает гранаты, если их больше двух разновидностей в инвентаре. Данный фикс полностью отключает движковое переключение. Для исправления требуется скриптовая реализация переключения.

== Управление "торгуемостью" предметов ==

*[ТЧ]* Добавлено управление "торгуемостью" предметов. Это включает в себя фикс функции наполнения окна торговли и дополнительный глобальный флаг активации фильтрации. Кроме того использованы ранее добавленные возможности по чтению и установке значения в инвентарном предмете.

1. Внесено изменение во внутреннюю функцию наполнения окна торговли. Туда добавлена проверка двух флажков, которые хранятся в объекте предмета. Использовано поле флагов размеров в два байта по смещению 132 от начала объекта инвентарного предмета, в котором имелись несколько неиспользованных бит начиная с 12-го бита (считая от нуля). Флажки такие:
 * бит 12 - сделать предмет безусловно продаваемым
 * бит 13 - сделать предмет безусловно непродаваемым (будет проверяться только если не установлен бит 12)

Вот функции обёртки для работы с этими флагами:

<code lang="Lua">function set_item_undoubtfully_tradable(item, value)
    item:set_inventory_item_int16(132, flags16():assign(item:get_inventory_item_int16(nil, 132)):set(4096, value):get())
end
function set_item_undoubtfully_untradable(item, value)
   item:set_inventory_item_int16(132, flags16():assign(item:get_inventory_item_int16(nil, 132)):set(8192, value):get())
end</code>

2.Кроме того, все эти проверки будут выполняться только если установлен глобальный флаг активности проверок. Для установки и снятия этого флага также добавлены две глобальные функции:
 * *set_trade_filtration_on()* -- включить режим фильтрации
 * *set_trade_filtration_off()* -- отключить режим фильтрации

Итого, для активации фильтрации предметов надо включить глобальный флаг, используя *set_trade_filtration_on()*, затем перебрать все предметы в инвентаре и для каждого включить либо флаг 12, либо флаг 13, либо не включать никакой. Если фильтрация отключена глобально или оба флага сброшены, то для предмета будет использовано движковое условие, взятое из конфига торговца.

== Получение/установка значений по смещению для инвентарного предмета ==
 * get_go_float
 * set_go_float
 * get_go_int
 * set_go_int
 * get_go_int16
 * set_go_int16
 * set_go_shared_str

 * get_inventory_item_float
 * set_inventory_item_float
 * get_inventory_item_int
 * set_inventory_item_int
 * get_inventory_item_int16
 * set_inventory_item_int16
 * set_inventory_item_shared_str

== Получение/установка 64-х разрядного счётчика из объекта класса *game.CTime* ==

Время в движке измеряется 64-х разрядным счётчиком, считающим миллисекунды с ...
Штатным образом объект класса *game.CTime* позволяет получить его значение с помощью метода *get* только в виде компонент: год, месяц, день, час, секунды, миллисекунды. Соответственно, задать значение объекта (с помощью методов *set*, *setHMSms*, *setHMS*) также можно только через задание этих компонент. Это удобно для манипуляций значениями, однако при записи/чтении в/из нетпакета приходится разбирать объект на компоненты, сохранять много значений по отдельности и потом при загрузке их читать и ими задавать значение. Это неудобно, поэтому добавлены функции для получения и записи объекта *CTime* в виде двух 32-х разрядных значений, которые являются соответственно старшей и младшей частями полного счётчика.

Использование:
 * *local lv, bv = time:get_value()* -- получить младшую и старшую части счётчика
 * *time:set_value(lv, gv)* -- установить значение объекта из компонент

Примечание: полученные таким образом компоненты предназначены исключительно для сохранения и восстановления значения времени из нетпакета. Никак иначе их использовать не рекомендуется.


== Расширения для матричных операций ==

В билдах класс *matrix* обладал полным набором матричных и векторных операций. В релизе почти все они были убраны.

*[ТЧ]* Добавлены следующие методы, делающие класс *matrix* несколько более полезным:
 * *m:transpose()* -- транспонировать матрицу
 * *m:mul_43(v)* -- умножить на вектор. Результат замещает матрицу-аргумент, 4-й компонент вектора принимается равным единице.

== Управление прожектором ==

*[ТЧ]* Добавлены функции для управления состоянием и получения состояния прожектора.
 * *proj:projector_on()* -- включить
 * *proj:projector_off()* -- выключить
 * *proj:switch_projector()* -- переключить
 * *proj:projector_is_on()* -- узнать состояние

== Возможность регистрации различных команд консоли ==

Эти возможности подразумевают использование не непосредственно в игре, а для программиста. Дают возможность добавлять разные команды консоли. Одно из применений - возможность сохранять настройки в файле *user.ltx*

*[ТЧ]* Добавлены макросы

 * *REGISTER_CC_INT2*   - регистрация команды, связанной с целочисленным параметром
 * *REGISTER_CC_FLOAT2* - регистрация команды, связанной с числом с плавающей запятой
 * *REGISTER_CC_FLAG*   - регистрация команды, связанной с двоичным флагом

Новые команды добавляются в файле *console_commands_reg_fix.asm*. Подробнее:

Регистрация команды, меняющей целочисленное значение по заданному глобальному адресу:

*REGISTER_CC_INT2   global_var, "command_name", 3, 10*

здесь
 * *global_var* - метка глобальной 32-х разрядной переменной
 * *"command_name"* - имя команды
 * *3 и 10* - соответственно нижний и верхний пределы значений.

Регистрация команды, меняющей значение с плавающей запятой по заданному глобальному адресу:

*REGISTER_CC_FLOAT2 global_var, "command_name", 0.1, 0.5*

здесь
 * *global_var* - метка глобальной переменной в формате float32
 * *"command_name"* - имя команды
 * *0.1 и 0.5* - соответственно нижний и верхний пределы значений.

Регистрация команды, меняющей заданный бит переменной по заданному глобальному адресу:

*REGISTER_CC_FLAG   global_var, mask, "command_name"*

здесь
 * *global_var* - метка глобальной 32-х разрядной переменной
 * *mask* - число, задающее маску, которая задаёт конкретный бит или группу битов внутри числа
 * *"command_name"* - имя команды

== Увеличение игрового времени ==

*[ТЧ]* Добавлена функция *level.advance_game_time(dt)*, позволяющая увеличить игровое время на заданное количество миллисекунд.

== Отсоединение окна от родительского ==

Иногда имеется проблема, связанная с тем, что тяжело сохранить ссылку на родительское окно пользовательского окна. Такая ситуация иногда возникает при размещении элементов на движковых диалогах торговли, PDA, инвентаря и т.п. Данная правка предназначена для безболезненного отсоединения от родителя без необходимости иметь ссылку на родительское окно и вообще необходимости знать, есть ли родительское окно.

*[ТЧ]* В класс *CUIWindow* добавлен метод *DetachFromParent*, который эквивалентен по действию методу *DetachChild*, но не требует при этом иметь ссылку на объект родительского окна. Если родительского окна нет, то функция ничего не делает.

== Универсальный хак для *CActorCondition* ==

Ряд параметров актора хранятся не прямо в объекте актора, а в специальном объекте типа *CActorCondition*, на который в объекте актора хранится только указатель. Соответственно, для извлечения значений оттуда нужен специальный хак.

*[ТЧ]*
 * *get_actor_condition_float* - получение float по смещению в
 * *set_actor_condition_float* - запись float по смещению

Использование:

*local val = actor:get_actor_condition_float(shift)*<br>
*actor:set_actor_condition_float(nil, value, shift)*

== Манипуляции костями скелета мировой модели и худа ==

*[ТЧ]*
 * *get_wpn_bone_id(bone_name)* - получить индекс кости по её имени для объекта оружия, получаем индекс кости
 * *get_hud_bone_id(bone_name)* - получить индекс кости по её имени для худа объекта, получаем индекс кости
 * *get_hud_bone_pos(bone_name)* - получить положение кости худа по её имени, получаем vector
 * *get_wpn_bone_visible(bone_name)* - получить видимость кости мировой модели объекта оружия (возвращает 1/0)
 * *set_wpn_bone_visible(bone_name, 1|0)* - установить видимость кости мировой модели объекта оружия
 * *set_hud_bone_visible(bone_name, 1|0)* - установить видимость кости худа объекта
 * *get_bone_visible(bone_name)* - получить видимость кости мировой модели объекта (возвращает 1/0)
 * *set_bone_visible(bone_name, 1|0)* - установить видимость кости объекта
 * *play_hud_animation(animation_name, mix_in)* - проиграть анимацию худа (анимация должна присутствовать в модели). Второй аргумент (true|false) определяет плавность перехода
 * *ini_file* object:get_visual_ini()* - получить внутренний конфиг модели. Это конфиг, который можно редактировать только в Actor Editor. Многие объекты хранят там свои настройки (машины, прожектора и т.п.)


== Обновление окна инвентаря ==

*[ТЧ]* Добавлен метод *invalidate_inventory* класса *game_object* для обновления окна инвентаря. Может потребоваться после некоторых операций с перемещением предметов между слотами, поясом, рюкзаком. Использование:

*actor:invalidate_inventory()*


== Доступ к функции трассировки пересечения луча и геометрии ==

*[ТЧ]* Добавлен интерфейс к  внутренней функции *RayPick*, которая может проверить пересекается ли заданная произвольная прямая с какой-либо геометрией на уровне. Поскольку функция имеет много параметров, то подходящего прототипа для полноценной регистрации не нашлось. Поэтому пришлось передавать входные данные и получать результаты через глобальные переменные. Теперь подробнее.
Входными аргументами функции являются: точка, откуда начинаем трассировку, единичный вектор направления трассировки, диапазон трассировки, флаги геометрии, игнорируемый объект. Выходные результаты это логическое значение успешности поиска, расстояние до найденной точки пересечения, объект, которому принадлежит найденная точка.

вектор направления трассировки задаётся так:<br>
*db.actor:set_vector_global_arg_1(direction)*

точка, откуда начинаем трассировку задаётся так:<br>
*db.actor:set_vector_global_arg_2(position)*

диапазон трассировки задаётся так:<br>
*set_float_args_12(range, 0)* -- второе значение - это заглушка

флаги, задающие фильтр геометрии для поиска, задаются так<br>
*set_int_arg1(flags)*

игнорируемый объект задаётся так<br>
*db.actor:set_object_arg_1(obj)* -- аргумент, клиентский объект или nil

собственно выполнение запроса по заданным параметрам выполняется так:<br>
*local res = level.perform_ray_pick_query()*

получение расстояния до найденной точки:<br>
*local res_dist = level.get_ray_pick_dist()* -- если поиск не был успешен (вызов level.perform_ray_pick_query() вернул false), то это будет в точности равно ранее заданному значению диапазона поиска.

получение объекта:<br>
*local res_obj = level.get_ray_pick_obj()* -- тип - клиентский объект или nil

== Функции получения стандартных окон ==

*[ТЧ]* Добавлены функции получения стандартных окон:
<code lang="Lua">local wnd = level.get_inventory_wnd() -- инвентарь
local wnd = level.get_pda_wnd() -- PDA
local wnd = level.get_talk_wnd() -- окно диалога
local wnd = level.get_car_body_wnd() -- инвентарь трупа или ящика
local wnd = level.get_trade_wnd() -- окно торговли
</code>

== Функция получения собеседника во время разговора или торговли ==

*[ТЧ]* Добавлена функция получения клиентского объекта собеседника. Пользоваться можно только во время разговора или торговли.

*local npc = level.get_second_talker()*